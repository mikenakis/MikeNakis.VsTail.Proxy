<!-- MikeNakis.Commonfiles/AllProjects.proj.xml -->
<Project>

	<PropertyGroup>
		<LangVersion>12</LangVersion>
		<ImplicitUsings>Disable</ImplicitUsings>
		<Nullable>Enable</Nullable>
		<DebugSymbols>True</DebugSymbols>

		<!-- Under the "legacy project system", project references were _not_ transitive. When Sdk-style projects were
		     introduced, project references became transitive. This is retarded: project references should _not_ be
			 transitive because the availability of a certain project should not depend on whether it is referenced or
			 not by another project that we reference, which is a private implementation detail of the other project. -->
		<DisableTransitiveProjectReferences>True</DisableTransitiveProjectReferences>

		<!-- The following magical incantation is necessary for the build acceleration magic to work.
		     In Visual Studio, if you go to Options -> Projects and Solutions -> SDK Style Projects -> Up to Date Checks
			 and make sure that:
			 - "Don't call MSBuild if a project appears to be up to date" is checked
			 - "Logging Level" is set to "Minimal" (or above)
			 ...and then try to build, the following message will be emitted once for each project:
			     "FastUpToDate: This project has enabled build acceleration, but not all referenced projects produce a
			     reference assembly. Ensure projects producing the following outputs have the 'ProduceReferenceAssembly'
			     MSBuild property set to 'true': [list-of-projects] See https://aka.ms/vs-build-acceleration for more
			     information. ([name-of-project])"
			 So, the following magical incantation is necessary to avoid this message. -->
		<ProduceReferenceAssembly>True</ProduceReferenceAssembly>

		<!-- TODO: research this! -->
		<IsTestingPlatformApplication>False</IsTestingPlatformApplication>

		<!-- TODO: research this! -->
		<!-- ManagePackageVersionsCentrally>True</ManagePackageVersionsCentrally -->

		<!-- TODO: research this! -->
		<!--<EnableMSTestRunner>True</EnableMSTestRunner>-->

		<!-- CS0809: "Obsolete member overrides non-obsolete member" -->
		<NoWarn>$(NoWarn);CS0809</NoWarn>
		<!-- Justification: It is perfectly fine for an obsolete member to override a non-obsolete member. We do so
		     intentionally all over the place. This warning is junk. -->

		<!-- PEARL: these two seem to have absolutely no effect, whether you set them to True or False -->
		<DefineDebug>False</DefineDebug>
		<DefineTrace>False</DefineTrace>

		<!-- This enables some extra build-time checking of MSBuild project files. It is very half-assed but they might
		     improve it over time. -->
		<MSBuildCheck>True</MSBuildCheck>

		<!-- PEARL: PathMap cannot be used for anything but the release build, because if you set it to anything other
		        than the following then all debugging breaks, and even if you set it to the following, edit-and-continue breaks. -->
		<!--<PathMap Condition="'$(NoPathMap)' != 'True'">$(MSBuildProjectDirectory)=.\..\$(MSBuildProjectName)</PathMap>-->

	</PropertyGroup>

	<Choose>
		<When Condition="'$(Configuration)'=='Debug'">
			<PropertyGroup>
				<!-- PEARL: DEBUG and TRACE have already been defined and they would be defined even if we did not want them to -->
				<DefineConstants>$(DefineConstants);PRECONDITIONS;ASSERTIONS</DefineConstants>
				<CheckForOverflowUnderflow>True</CheckForOverflowUnderflow>
				<Optimize>False</Optimize>
				<EnableNETAnalyzers>True</EnableNETAnalyzers>
				<PackagesConfiguration>Develop</PackagesConfiguration>
				<DebugType>Portable</DebugType>
			</PropertyGroup>
		</When>
		<When Condition="'$(Configuration)'=='Optimized'">
			<PropertyGroup>
				<DefineConstants>$(DefineConstants);PRECONDITIONS</DefineConstants>
				<CheckForOverflowUnderflow>False</CheckForOverflowUnderflow>
				<Optimize>True</Optimize>
				<EnableNETAnalyzers>True</EnableNETAnalyzers>
				<PackagesConfiguration>Develop</PackagesConfiguration>
			</PropertyGroup>
		</When>
		<When Condition="'$(Configuration)'=='Develop'">
			<PropertyGroup>
				<DefineConstants>$(DefineConstants);PRECONDITIONS</DefineConstants>
				<CheckForOverflowUnderflow>False</CheckForOverflowUnderflow>
				<Optimize>True</Optimize>
				<EnableNETAnalyzers>False</EnableNETAnalyzers>
				<PackagesConfiguration>Release</PackagesConfiguration>
				<DefineDebug>False</DefineDebug>
				<DefineTrace>True</DefineTrace>
			</PropertyGroup>
		</When>
		<When Condition="'$(Configuration)'=='Release'">
			<PropertyGroup>
				<DefineConstants>$(DefineConstants)</DefineConstants>
				<CheckForOverflowUnderflow>False</CheckForOverflowUnderflow>
				<Optimize>True</Optimize>
				<EnableNETAnalyzers>False</EnableNETAnalyzers>
				<PackagesConfiguration>Release</PackagesConfiguration>
				<Deterministic>True</Deterministic>
				<!-- This property acts like PathMap replacing $(MSBuildProjectDirectory) with '/_/', thus removing
				     from source paths information that depends on the machine that the code was compiled in. -->
				<!-- PEARL: DeterministicSourcePaths can only be used on release builds, because it breaks
				     edit-and-continue. (Strangely enough, if used on a debug build, breakpoints still work.) -->
				<!-- PEARL: This property is UNDOCUMENTED. -->
				<DeterministicSourcePaths>True</DeterministicSourcePaths>
				<DebugType>Portable</DebugType>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<ConfigurationIsInvalid>True</ConfigurationIsInvalid>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<Target Name="ValidateBuildConfiguration" BeforeTargets="Compile" Condition="'$(ConfigurationIsInvalid)'!=''">
		<Error Text="Invalid configuration: '$(Configuration)'" />
	</Target>

	<!--<Target Name="PrintStuff1" BeforeTargets="Compile">
		<Message Importance="High" Text="TargetFramework: '$(TargetFramework)'; TargetPlatform: '$(TargetPlatform)'; RuntimeIdentifier: '$(RuntimeIdentifier)'" />
	</Target>-->

	 <!--<Target Name="PrintStuff2" BeforeTargets="Compile">
		<Message Importance="High" Text="Configuration: '$(Configuration)'; DefineConstants: '$(DefineConstants)'" />
	</Target>-->

	<!--<Target Name="PrintStuff3" BeforeTargets="Compile">
		<Message Importance="High" Text="IsTestProject: '$(IsTestProject)'" />
	</Target>-->

	<PropertyGroup Condition="'$(EnableNETAnalyzers)' == 'True'">
		<AnalysisLevel>latest-Recommended</AnalysisLevel>
		<RunAnalyzersDuringBuild>True</RunAnalyzersDuringBuild>
		<RunAnalyzersDuringLiveAnalysis>True</RunAnalyzersDuringLiveAnalysis>
		<EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
		<WarningLevel>9999</WarningLevel>

		<!-- PEARL: Microsoft's understanding of the "treat warnings as errors" concept involves the promotion of every
			single warning into an actual error.
			A much more reasonable approach would have been to simply generate a single error at the end of the build, 
			if there were any warnings during the build. Alas, that would have made too much sense.
			So, if TreatWarningsAsErrors is set to True, then any .editorconfig rules whose severity is explicitly set
			to "warning" will instead appear as errors. (What kind of idiot designed this?)
			You can set CodeAnalysisTreatWarningsAsErrors to False, but then you forfeit the "treat warnings as errors"
			functionality for code analysis rules, and besides, this will only affect code analysis	rules (CAxxxx); it
			will not affect formatting rule violations (IDExxxx) which will still appear as errors.
			(What kind of full-retard designed this?) -->
		<!--<TreatWarningsAsErrors>True</TreatWarningsAsErrors>
		<CodeAnalysisTreatWarningsAsErrors>False</CodeAnalysisTreatWarningsAsErrors>-->

		<!-- PEARL: The following magical incantation is necessary or else we get the following warning:
		            "CSC : warning EnableGenerateDocumentationFile: Set MSBuild property 'GenerateDocumentationFile'
					to 'true' in project file to enable IDE0005 (Remove unnecessary usings/imports) on build" -->
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
	</PropertyGroup>

	<ItemGroup Condition="'$(EnableNETAnalyzers)' == 'True'">
		<!-- PEARL: if a globalconfig file is not found, we get silent failure. -->
		<GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)\AllCode.globalconfig" />
		<GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)\ProductionCode.globalconfig" Condition="'$(IsTestProject)' != 'True'" />
		<GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)\TestCode.globalconfig" Condition="'$(IsTestProject)' == 'True'" />
	</ItemGroup>

	<!-- https://github.com/coverlet-coverage/coverlet -->
	<ItemGroup Condition="'$(Configuration)'=='Debug' AND '$(IsTestProject)' == 'True'">
		<PackageReference Include="coverlet.collector" Version="6.0.4"/>
	</ItemGroup>

	<ItemGroup Condition="'$(IsTestProject)'=='True'">
		<PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.10.0" />
		<PackageReference Include="MSTest.TestAdapter" Version="3.6.2" />
		<PackageReference Include="MSTest.TestFramework" Version="3.6.2" />
	</ItemGroup>

	<ItemGroup>
		<!-- See "Enable debugging and diagnostics with Source Link"
		    https://learn.microsoft.com/en-us/visualstudio/debugger/how-to-improve-diagnostics-debugging-with-sourcelink -->
		<!--<PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>-->
	</ItemGroup>

	<ItemGroup>
		<!-- For the `IsTargetFrameworkCompatible()` magic, see https://stackoverflow.com/a/79605485/773113 -->
		<Using Include="System.Collections.Generic" />
		<Using Include="System.Linq" />
		<Using Alias="ConcurrentCollections" Include="System.Collections.Concurrent" />
		<Using Alias="LegacyCollections" Include="System.Collections" />
		<Using Alias="ImmutableCollections" Include="System.Collections.Immutable" Condition="$([MSBuild]::IsTargetFrameworkCompatible($(TargetFramework), 'net8.0'))" />
		<Using Alias="LinqExpr" Include="System.Linq.Expressions" />
		<Using Alias="SpecializedCollections" Include="System.Collections.Specialized" />
		<Using Alias="Math" Include="System.Math" />
		<Using Alias="RegEx" Include="System.Text.RegularExpressions" />
		<Using Alias="Sys" Include="System" />
		<Using Alias="SysCodeAnalysis" Include="System.Diagnostics.CodeAnalysis" />
		<Using Alias="SysCompiler" Include="System.Runtime.CompilerServices" />
		<Using Alias="SysCompModel" Include="System.ComponentModel" />
		<Using Alias="SysCompress" Include="System.IO.Compression" />
		<Using Alias="SysConfig" Include="System.Configuration" />
		<Using Alias="SysContracts" Include="System.Diagnostics.Contracts" />
		<Using Alias="SysCrypto" Include="System.Security.Cryptography" />
		<Using Alias="SysDiag" Include="System.Diagnostics" />
		<Using Alias="SysDraw" Include="System.Drawing" />
		<Using Alias="SysGlob" Include="System.Globalization" />
		<Using Alias="SysHttp" Include="System.Net.Http" Condition="$([MSBuild]::IsTargetFrameworkCompatible('netstandard2.0', $(TargetFramework)))" />
		<!-- PEARL: the question of whether System.Drawing.Imaging is available or not is immensely complicated!
		            see https://learn.microsoft.com/en-us/dotnet/api/system.drawing.imaging
					The only solution to this problem is to have it explicitly imported by each source file that needs it. -->
		<!-- <Using Alias="SysImage" Include="System.Drawing.Imaging" />-->
		<Using Alias="SysInterop" Include="System.Runtime.InteropServices" />
		<Using Alias="SysIo" Include="System.IO" />
		<Using Alias="SysIoPipes" Include="System.IO.Pipes" />
		<Using Alias="SysJson" Include="System.Text.Json" Condition="$([MSBuild]::IsTargetFrameworkCompatible('netcore3.0', $(TargetFramework)))" />
		<Using Alias="SysNet" Include="System.Net" />
		<Using Alias="SysNum" Include="System.Numerics" />
		<Using Alias="SysObjModel" Include="System.Collections.ObjectModel" />
		<Using Alias="SysReflect" Include="System.Reflection" />
		<Using Alias="SysTask" Include="System.Threading.Tasks" />
		<Using Alias="SysText" Include="System.Text" />
		<Using Alias="SysThread" Include="System.Threading" />
		<Using Alias="SysXml" Include="System.Xml" />
		<Using Alias="SysXmlLinq" Include="System.Xml.Linq" />
		<Using Static="True" Include="System.Xml.XPath.Extensions" />
		<Using Static="True" Include="System.MemoryExtensions" Condition="$([MSBuild]::IsTargetFrameworkCompatible($(TargetFramework), 'net8.0'))" />
		<Using Static="True" Include="System.Threading.Tasks.TaskAsyncEnumerableExtensions" Condition="$([MSBuild]::IsTargetFrameworkCompatible($(TargetFramework), 'net8.0'))" />

		<!-- "Xps" stuff probably belongs to WPF, but it is not entirely clear, so let's prefix it with 'Sys' instead of 'Wpf'. -->
		<Using Alias="SysXps" Include="System.Windows.Xps" Condition="$(UseWPF)=='True'" />
		<Using Alias="SysXpsPackaging" Include="System.Windows.Xps.Packaging" Condition="$(UseWPF)=='True'" />

		<!-- WPF stuff. -->
		<Using Alias="Wpf" Include="System.Windows" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfAnimation" Include="System.Windows.Media.Animation" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfControls" Include="System.Windows.Controls" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfData" Include="System.Windows.Data" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfDocuments" Include="System.Windows.Documents" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfInput" Include="System.Windows.Input" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfInterop" Include="System.Windows.Interop" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfMarkup" Include="System.Windows.Markup" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfMedia" Include="System.Windows.Media" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfNavigation" Include="System.Windows.Navigation" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfPrimitives" Include="System.Windows.Controls.Primitives" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfResources" Include="System.Windows.Resources" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfShapes" Include="System.Windows.Shapes" Condition="$(UseWPF)=='True'" />
		<Using Alias="WpfThreading" Include="System.Windows.Threading" Condition="$(UseWPF)=='True'" />

		<!-- WinForms stuff. -->
		<Using Alias="WinForms" Include="System.Windows.Forms" Condition="$(UseWindowsForms)=='True'" />

	</ItemGroup>

</Project>
