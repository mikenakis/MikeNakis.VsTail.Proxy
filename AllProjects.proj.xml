<!-- MikeNakis.Commonfiles/AllProjects.proj.xml -->
<Project>

	<PropertyGroup>
		<LangVersion>12</LangVersion>
		<ImplicitUsings>Disable</ImplicitUsings>
		<Nullable>Enable</Nullable>
		<DebugSymbols>True</DebugSymbols>
		<DebugType>Portable</DebugType>
		<Deterministic>True</Deterministic>
		<DisableTransitiveProjectReferences>True</DisableTransitiveProjectReferences>

		<!-- The following magical incantation is necessary for the build acceleration magic to work.
		     In Visual Studio, if you go to Options -> Projects and Solutions -> SDK Style Projects -> Up to Date Checks
			 and make sure that:
			 - "Don't call MSBuild if a project appears to be up to date" is checked
			 - "Logging Level" is set to "Minimal" (or above)
			 ...and then try to build, the following message will be emitted once for each project:
			     "FastUpToDate: This project has enabled build acceleration, but not all referenced projects produce a
			     reference assembly. Ensure projects producing the following outputs have the 'ProduceReferenceAssembly'
			     MSBuild property set to 'true': [list-of-projects] See https://aka.ms/vs-build-acceleration for more
			     information. ([name-of-project])"
			 So, the following magical incantation is necessary to avoid this message. -->
		<ProduceReferenceAssembly>True</ProduceReferenceAssembly>

		<!-- TODO: research this! -->
		<IsTestingPlatformApplication>False</IsTestingPlatformApplication>

		<!-- TODO: research this! -->
		<!-- ManagePackageVersionsCentrally>True</ManagePackageVersionsCentrally -->

		<!-- TODO: research this! -->
		<!--<EnableMSTestRunner>True</EnableMSTestRunner>-->

		<PackagesConfiguration Condition="'$(Configuration)'=='Debug'"  >Develop</PackagesConfiguration>
		<PackagesConfiguration Condition="'$(Configuration)'=='Develop'">Release</PackagesConfiguration>
		<PackagesConfiguration Condition="'$(Configuration)'=='Release'">Release</PackagesConfiguration>

		<!-- CS0809: "Obsolete member overrides non-obsolete member" -->
		<NoWarn>$(NoWarn);CS0809</NoWarn>
		<!-- Justification: It is perfectly fine for an obsolete member to override a non-obsolete member. We do so
		     intentionally all over the place. This warning is junk. -->
	</PropertyGroup>
	
	<Target Name="ValidateBuildConfiguration" BeforeTargets="Compile">
		<Error Text="Invalid configuration '$(Configuration)'!" Condition="'$(Configuration)'!='Debug' AND '$(Configuration)'!='Develop' AND '$(Configuration)'!='Release'" />
	</Target>

	<PropertyGroup>
		<DefineConstants           Condition="'$(Configuration)'=='Debug'"  >$(DefineConstants);DEBUG;PRECONDITIONS;TRACE</DefineConstants>
		<DefineConstants           Condition="'$(Configuration)'=='Develop'">$(DefineConstants);PRECONDITIONS;TRACE</DefineConstants>
		<DefineConstants           Condition="'$(Configuration)'=='Release'">$(DefineConstants);RELEASE;TRACE</DefineConstants>

		<CheckForOverflowUnderflow Condition="'$(Configuration)'=='Debug'"  >True</CheckForOverflowUnderflow>
		<CheckForOverflowUnderflow Condition="'$(Configuration)'=='Develop'">False</CheckForOverflowUnderflow>
		<CheckForOverflowUnderflow Condition="'$(Configuration)'=='Release'">False</CheckForOverflowUnderflow>

		<Optimize                  Condition="'$(Configuration)'=='Debug'"  >False</Optimize>
		<Optimize                  Condition="'$(Configuration)'=='Develop'">True</Optimize>
		<Optimize                  Condition="'$(Configuration)'=='Release'">True</Optimize>
		
		<EnableNETAnalyzers        Condition="'$(Configuration)'=='Debug'"  >True</EnableNETAnalyzers>
		<EnableNETAnalyzers        Condition="'$(Configuration)'=='Develop'">False</EnableNETAnalyzers>
		<EnableNETAnalyzers        Condition="'$(Configuration)'=='Release'">False</EnableNETAnalyzers>
	</PropertyGroup>
	
	<PropertyGroup Condition="'$(EnableNETAnalyzers)' == 'True'">
		<AnalysisLevel>latest-Recommended</AnalysisLevel>
		<RunAnalyzersDuringBuild>True</RunAnalyzersDuringBuild>
		<RunAnalyzersDuringLiveAnalysis>True</RunAnalyzersDuringLiveAnalysis>
		<EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
		<WarningLevel>9999</WarningLevel>

		<!-- PEARL: Microsoft's understanding of the "treat warnings as errors" concept involves the promotion of every
			single warning into an actual error.
			A much more reasonable approach would have been to simply generate a single error at the end of the build, 
			if there were any warnings during the build. Alas, that would have made too much sense.
			So, if TreatWarningsAsErrors is set to True, then any .editorconfig rules whose severity is explicitly set
			to "warning" will instead appear as errors. (What kind of idiot designed this?)
			You can set CodeAnalysisTreatWarningsAsErrors to False, but then you forfeit the "treat warnings as errors"
			functionality for code analysis rules, and besides, this will only affect code analysis	rules (CAxxxx); it
			will not affect formatting rule violations (IDExxxx) which will still appear as errors.
			(What kind of full-retard designed this?) -->
		<!--<TreatWarningsAsErrors>True</TreatWarningsAsErrors>
		<CodeAnalysisTreatWarningsAsErrors>False</CodeAnalysisTreatWarningsAsErrors>-->

		<!-- PEARL: The following magical incantation is necessary or else we get the following warning:
		            "CSC : warning EnableGenerateDocumentationFile: Set MSBuild property 'GenerateDocumentationFile'
					to 'true' in project file to enable IDE0005 (Remove unnecessary usings/imports) on build" -->
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
	</PropertyGroup>

	<ItemGroup Condition="'$(EnableNETAnalyzers)' == 'True'">
		<!-- PEARL: if a globalconfig file is not found, we get silent failure. -->
		<GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)\AllCode.globalconfig" />
		<GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)\ProductionCode.globalconfig" Condition="'$(IsTestProject)' != 'True'" />
		<GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)\TestCode.globalconfig" Condition="'$(IsTestProject)' == 'True'" />
	</ItemGroup>

	<ItemGroup Condition="'$(Configuration)'=='Debug'">
		<PackageReference Include="coverlet.collector" Version="6.0.0"/>
	</ItemGroup>

	<ItemGroup Condition="'$(IsTestProject)'=='True'">
		<PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.10.0" />
		<PackageReference Include="MSTest.TestAdapter" Version="3.6.2" />
		<PackageReference Include="MSTest.TestFramework" Version="3.6.2" />
	</ItemGroup>

	<ItemGroup>
		<!-- See "Enable debugging and diagnostics with Source Link"
		    https://learn.microsoft.com/en-us/visualstudio/debugger/how-to-improve-diagnostics-debugging-with-sourcelink -->
		<!--<PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>-->
	</ItemGroup>

    <ItemGroup>
		<!-- TODO: these are a bad idea afterall. Move them to an actual source file. -->
        <!-- Examples:
		<Using Include="System.Math" Static="True" />
        <Using Include="Spectre.Console.AnsiConsole" Alias="Console" />-->
		<Using Include="System.Collections.Generic" />
		<Using Include="System.Linq" />
		<Using Alias="ConcurrentCollections" Include="System.Collections.Concurrent" />
		<Using Alias="LegacyCollections" Include="System.Collections" />
		<Using Alias="LinqExpr" Include="System.Linq.Expressions" />
		<Using Alias="SpecializedCollections" Include="System.Collections.Specialized" />
		<Using Alias="Math" Include="System.Math" />
		<Using Alias="RegEx" Include="System.Text.RegularExpressions" />
		<Using Alias="Sys" Include="System" />
		<Using Alias="SysCodeAnalysis" Include="System.Diagnostics.CodeAnalysis" />
		<Using Alias="SysCompiler" Include="System.Runtime.CompilerServices" />
		<Using Alias="SysCompModel" Include="System.ComponentModel" />
		<Using Alias="SysCompress" Include="System.IO.Compression" />
		<Using Alias="SysConfig" Include="System.Configuration" />
		<Using Alias="SysConsole" Include="System.Console" />
		<Using Alias="SysContracts" Include="System.Diagnostics.Contracts" />
		<Using Alias="SysCrypto" Include="System.Security.Cryptography" />
		<Using Alias="SysDiag" Include="System.Diagnostics" />
		<Using Alias="SysDraw" Include="System.Drawing" />
		<Using Alias="SysGlob" Include="System.Globalization" />
		<!--<Using Alias="SysHttp" Include="System.Net.Http" />-->
		<!--<Using Alias="SysImage" Include="System.Drawing.Imaging" />-->
		<Using Alias="SysInterop" Include="System.Runtime.InteropServices" />
		<Using Alias="SysIo" Include="System.IO" />
		<Using Alias="SysIoPipes" Include="System.IO.Pipes" />
		<!--<Using Alias="SysJson" Include="System.Text.Json" />-->
		<Using Alias="SysNet" Include="System.Net" />
		<Using Alias="SysNum" Include="System.Numerics" />
		<Using Alias="SysObjModel" Include="System.Collections.ObjectModel" />
		<Using Alias="SysReflect" Include="System.Reflection" />
		<Using Alias="SysTask" Include="System.Threading.Tasks" />
		<Using Alias="SysText" Include="System.Text" />
		<Using Alias="SysThread" Include="System.Threading" />
		<Using Alias="SysXml" Include="System.Xml" />
		<Using Alias="SysXmlLinq" Include="System.Xml.Linq" />
	
		<Using Static="True" Include="System.Xml.XPath.Extensions" />
		
    </ItemGroup>

</Project>
